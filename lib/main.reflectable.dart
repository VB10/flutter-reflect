// This file has been generated by the reflectable package.
// https://github.com/dart-lang/reflectable.

import "dart:core";
import 'package:refsample/core/service/reflaction.dart' as prefix0;
import 'package:refsample/features/home/model/todo.dart' as prefix1;
import 'package:refsample/features/welcome/model/hello.dart' as prefix2;

// ignore:unused_import
import "package:reflectable/mirrors.dart" as m;
// ignore:unused_import
import "package:reflectable/src/reflectable_builder_based.dart" as r;
// ignore:unused_import
import "package:reflectable/reflectable.dart" as r show Reflectable;

final _data = <r.Reflectable, r.ReflectorData>{
  const prefix0.Reflector(): new r.ReflectorData(
      <m.TypeMirror>[
        new r.NonGenericClassMirrorImpl(
            r"Todo",
            r".Todo",
            7,
            0,
            const prefix0.Reflector(),
            const <int>[-1],
            null,
            null,
            -1,
            {},
            {},
            {
              r"": (b) => ({userId, id, title, completed}) => b
                  ? new prefix1.Todo(
                      userId: userId,
                      id: id,
                      title: title,
                      completed: completed)
                  : null,
              r"fromJson": (b) =>
                  (json) => b ? new prefix1.Todo.fromJson(json) : null
            },
            -1,
            -1,
            const <int>[-1],
            null,
            {
              r"==": 1,
              r"toString": 0,
              r"noSuchMethod": 1,
              r"hashCode": 0,
              r"runtimeType": 0,
              r"toJson": 0,
              r"userId": 0,
              r"userId=": 1,
              r"id": 0,
              r"id=": 1,
              r"title": 0,
              r"title=": 1,
              r"completed": 0,
              r"completed=": 1
            }),
        new r.NonGenericClassMirrorImpl(
            r"Hello",
            r".Hello",
            7,
            1,
            const prefix0.Reflector(),
            const <int>[-1],
            null,
            null,
            -1,
            {},
            {},
            {
              r"": (b) => () => b ? new prefix2.Hello() : null,
              r"setMessage": (b) =>
                  (text) => b ? new prefix2.Hello.setMessage(text) : null
            },
            -1,
            -1,
            const <int>[-1],
            null,
            {
              r"==": 1,
              r"toString": 0,
              r"noSuchMethod": 1,
              r"hashCode": 0,
              r"runtimeType": 0,
              r"printName": 0,
              r"message": 0,
              r"message=": 1,
              r"age": 0,
              r"age=": 1
            })
      ],
      null,
      null,
      <Type>[prefix1.Todo, prefix2.Hello],
      2,
      {
        r"==": (dynamic instance) => (x) => instance == x,
        r"toString": (dynamic instance) => instance.toString,
        r"noSuchMethod": (dynamic instance) => instance.noSuchMethod,
        r"hashCode": (dynamic instance) => instance.hashCode,
        r"runtimeType": (dynamic instance) => instance.runtimeType,
        r"toJson": (dynamic instance) => instance.toJson,
        r"userId": (dynamic instance) => instance.userId,
        r"id": (dynamic instance) => instance.id,
        r"title": (dynamic instance) => instance.title,
        r"completed": (dynamic instance) => instance.completed,
        r"printName": (dynamic instance) => instance.printName,
        r"message": (dynamic instance) => instance.message,
        r"age": (dynamic instance) => instance.age
      },
      {
        r"userId=": (dynamic instance, value) => instance.userId = value,
        r"id=": (dynamic instance, value) => instance.id = value,
        r"title=": (dynamic instance, value) => instance.title = value,
        r"completed=": (dynamic instance, value) => instance.completed = value,
        r"message=": (dynamic instance, value) => instance.message = value,
        r"age=": (dynamic instance, value) => instance.age = value
      },
      null,
      [
        const [0, 0, null],
        const [1, 0, null],
        const [
          0,
          0,
          const [#userId, #id, #title, #completed]
        ]
      ])
};

final _memberSymbolMap = null;

initializeReflectable() {
  r.data = _data;
  r.memberSymbolMap = _memberSymbolMap;
}
